/*
 * Copyright (C) 2013  Bob Rutledge
 * 
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>
 * and open the template in the editor.
 */
package org.lreqpcr.core.data_objects;

/**
 * Stores various database related information. 
 *
 * @author Bob Rutledge
 */
public abstract class DatabaseInfo extends LreObject {

    private double avRunFmax = 0;//The average Fmax derived by averageing the Run Fmax average across all of the Runs in the database
    private double avRunFmaxCV = 0;//The CV for the average Fmax values derived from multiple Runs
    private boolean isTargetQuantityNormalizedToFax;
    private boolean isEmaxFixTo100Percent;

    /**
     * The average Fmax generated by all profiles within all Runs
     * within the database, excluding average Profiles. This is used 
     * to correct for well-to-well differences in fluorescence units. 
     * This was derived from the observation that some, if not all, instruments 
     * calibration fluorescence for each individual wells. Variance in this 
     * calibration can led to large quantitative errors for both Fo and Ct 
     * based analysis. 
     * 
     * @return avRunFmax the average Fmax across all runs within the database
     */
    public double getAvRunFmax() {
        return avRunFmax;
    }

    /**
     * The average Fmax generated by all profiles within all Runs
     * within the database, excluding average Profiles. This is used 
     * to correct for well-to-well differences in fluorescence units. 
     * This was derived from the observation that some, if not all, instruments 
     * calibration fluorescence for each individual wells. Variance in this 
     * calibration can led to large quantitative errors for both Fo and Ct 
     * based analysis. 
     * 
     * @param avRunFmax the average Fmax across all runs within the database
     */
    public void setAvRunFmax(double avRunFmax) {
        this.avRunFmax = avRunFmax;
    }

    public double getAvRunFmaxCV() {
        return avRunFmaxCV;
    }

    public void setAvRunFmaxCV(double avRunFmaxCV) {
        this.avRunFmaxCV = avRunFmaxCV;
    }

    public boolean isTargetQuantityNormalizedToFax() {
        return isTargetQuantityNormalizedToFax;
    }

    public void setIsTargetQuantityNormalizedToFax(boolean isTargetQuantityNormalizedToFax) {
        this.isTargetQuantityNormalizedToFax = isTargetQuantityNormalizedToFax;
    }

    /**
     * This indicates whether Emax is fixed to 100% for all profiles 
     * within the database.
     *
     * @return whether Fmax is fixed to 100%
     */
    public boolean isIsEmaxFixTo100Percent() {
        return isEmaxFixTo100Percent;
    }

    /**
     * Fixing Emax to 100% compensates for aberrant amplification kinetics 
     * that generally generates Emax >100% observed for some enzyme formulations. 
     * For example, QuantiTect has been found to consistently generate 
     * Emax values >100%, which can reach >110% in extreme cases. The source 
     * of this aberrancy has not been identified, but fix Emax to 100% has 
     * been found to be effective in reducing quantitative errors. 
     *
     */
    public void setIsEmaxFixTo100Percent(boolean isEmaxFixTo100Percent) {
        this.isEmaxFixTo100Percent = isEmaxFixTo100Percent;
    }
}
