/*
 * Copyright (C) 2010  Bob Rutledge
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>
 * and open the template in the editor.
 */

package org.lreqpcr.core.data_objects;

import java.util.List;

/**
 * NOTE: additional work needs to be done to more effectively implement this interface.
 * An average profile is generated by averaging, for each cycle, the Fc datasets
 * produced by technical replicates.
 * This increases Fc read precision which in turn generates a more reliable analysis.
 *
 * Note that AverageProiles must correctly override updateProfile() in order to
 * deal when that average ReplicateProfile No is less than 10N, which cannot be updated
 * because Profile will set No to zero. Indeed, this is a basic flaw in AverageProfile
 * design, which should not have been an interface but should have extended Profile.
 * 
 *
 * @author Bob Rutledge
 */
public interface AverageProfile {

    /**
     * List of the replicate profiles from which this average profile was constructed.
     * @return List of the replicate profiles
     */
    public List<? extends Profile> getReplicateProfileList();
    // TODO rework this, e.g. override the updateProfile and getNo functions, 
    // possibly hiding both along with other functions...although this may not work 
    //WRT to differences in Sample and Calibration profiles...uggggggggh

    /**
     * Sets the list of the replicate profiles from which this average profile was constructed.
     * @param replicateProfileList List of replicate profiles
     */
    public void setReplicateProfileList(List<? extends Profile> replicateProfileList);

    public int getTheNumberOfActiveReplicateProfiles();
    
    /**
     * Determines if the AverageProfile is valid, based on whether the 
     * number of target molecules in the sample is greater than 10. If the number 
     * of target molecules is less than 10, the resulting average profile becomes 
     * distorted due to by Poison Distribution generating extensive profile scattering. 
     * In this case, the AverageProfile inherits the target quantities determined by 
     * the replicate profiles, that is the average from the replicate profiles. 
     * Calling this function will also update the
     * profile.
     *
     * @return whether the average No is less than 10 molecules
     */
    public boolean isTheReplicateAverageNoLessThan10Molecules();
    
    // TODO review AverageProfile should be eliminated: still struggling with duplicate code Sample vs. Calibration profiles
    //public double calcAvAmpliconTm();//However this introduces a new class variable that cannot be added via an Interface

}
