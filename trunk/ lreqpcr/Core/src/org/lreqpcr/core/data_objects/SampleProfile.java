/*
 * Copyright (C) 2010  Bob Rutledge
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>
 * and open the template in the editor.
 */
package org.lreqpcr.core.data_objects;

/**
 * 
 * A sample derived profile generated by a single amplification reaction.
 * @author Bob Rutledge
 */
public class SampleProfile extends Profile {

    public SampleProfile(Run run) {
        super(run);
    }

    @Override
    /**
     * Calculate the number of target molecules (No) 
     * based on the profile average Fo, OCF, amplicon size and target strandedness.
     * Note that the update will abort if the profile is excluded OR if an LRE
     * window has not been found. Note also that AverageProfiles must never call
     * this function when No less than 10N, as No will be set to zero.
     */
    public void updateProfile() {
        if (isExcluded() || !hasAnLreWindowBeenFound()) {
//This has caused all sorts of problems dealing with <10N in AverageProfiles
            setNo(0);
            setNoEmax100(0);
            return;
        }
        if (getTargetStrandedness() == TargetStrandedness.SINGLESTRANDED) {
            setNo(2 * ((getAvFo() / getOCF()) * 910000000000d) / getAmpliconSize());
            setNoEmax100(2 * ((getAvFoEmax100() / getOCF()) * 910000000000d) / getAmpliconSize());
        } else {
            setNo(((getAvFo() / getOCF()) * 910000000000d) / getAmpliconSize());
            setNoEmax100(((getAvFoEmax100() / getOCF()) * 910000000000d) / getAmpliconSize());
        }
    }

    /**
     * Sort Profile --> NoLreWindow --> Excluded profiles respectively
     * 
     * @param o the Profile to compare to
     * @return the comparator integer
     */
    @Override
    public int compareTo(Object o) {
        Profile profile = (Profile) o;
        if (profile.isExcluded()) {
            if (!isExcluded()) {
                return -1;
            }
        } else {
            if (isExcluded()) {
                return 1;
            }
            if (!profile.hasAnLreWindowBeenFound()) {
                if (hasAnLreWindowBeenFound()) {
                    return -1;
                }
            } else {
                return 1;
            }
        }
        return 0;
    }
}
