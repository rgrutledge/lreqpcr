/*
 * Copyright (C) 2010  Bob Rutledge
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>
 * and open the template in the editor.
 */
package org.lreqpcr.core.data_objects;

import java.util.List;

/**
 * An average sample profile generated by averaging the Fc datasets
 * produced by  replicates sample profiles.
 * This increases Fc read precision which in turn generates a more reliable analysis.
 *
 * @author Bob Rutledge
 */
public class AverageSampleProfile extends SampleProfile implements AverageProfile {

    private List<SampleProfile> sampleProfileList;
    private boolean isTheAverageReplicateNoLessThan10Molecules;
    private int numberOfActiveReplicateProfiles;

    /**
     * An average sample profile constructed from its sample replicate profiles.
     */
    public AverageSampleProfile() {
        setChildClass(SampleProfile.class);
    }

    /**
     *
     * @return list of replicate sample profiles
     */
    public List<SampleProfile> getReplicateProfileList() {
        return sampleProfileList;
    }

    /**
     * Will throw an illegal cast exception if the list does not contain
     * Sample Profiles.
     *
     * @param replicateProfileList
     */
    @SuppressWarnings(value = "unchecked")
    public void setReplicateProfileList(List<? extends Profile> replicateProfileList) {
        this.sampleProfileList = (List<SampleProfile>) replicateProfileList;
    }

    @Override
    public void updateProfile() {
        super.updateProfile();
        determineIfTheAverageReplicateNoIsLessThan10Molecules();
    }

    @Override
    public int compareTo(Object o) {
        SampleProfile prf = (AverageSampleProfile) o;
        //Sort by name
        return getName().compareToIgnoreCase(prf.getName());
    }

    /**
     * Determines if the AverageProfile is valid, due to the fact that if  
     * the number of target molecules is less than 10, the AverageProfile 
     * can be distorted due to profile scattering caused by Poison Distribution.
     * If so, the
     * average No of the AverageProfile is set to the average of the ReplicateProfile 
     * No values. 
     * 
     * @return whether the average No is less than 10 molecules
     */
    public boolean isReplicateAverageNoLessThan10Molecules() {
        return isTheAverageReplicateNoLessThan10Molecules;
    }

    /**
     * If the average No is less than 10 molecules, that AverageProfile can be 
     * distorted, and thus it must be invalidated. If so,
     * the average No for the AverageProfile is determined by
     * averaging the No values from each of the ReplicateProfiles. 
     */
    private void determineIfTheAverageReplicateNoIsLessThan10Molecules() {
        double sum = 0;
        int counter = 0;
        for (Profile repPrf : getReplicateProfileList()) {
            //It is important not to include excluded profiles
            if (!repPrf.isExcluded()) {
                if (!repPrf.hasAnLreWindowBeenFound()) {
//Without an LRE Window, a valid LRE-derived avNo is not available
//However, such profiles (i.e. flat profiles) default to zero molecules and thus must be counted
                    counter++;
                } else {
                    sum = sum + repPrf.getNo();
                    counter++;
                }
            }
        }
        numberOfActiveReplicateProfiles = counter;
        double averageReplicateNo = sum / counter;
        if (averageReplicateNo < 10) {
            isTheAverageReplicateNoLessThan10Molecules = true;
            if (numberOfActiveReplicateProfiles > 1) {
                setNo(averageReplicateNo);
            }
        } else {
            isTheAverageReplicateNoLessThan10Molecules = false;
        }
    }

    public int getNumberOfActiveReplicateProfiles() {
        return numberOfActiveReplicateProfiles;
    }
}
