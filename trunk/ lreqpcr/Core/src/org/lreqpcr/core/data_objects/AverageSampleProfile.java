/*
 * Copyright (C) 2013  Bob Rutledge
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>
 * and open the template in the editor.
 */
package org.lreqpcr.core.data_objects;

import java.util.List;

/**
 * An average sample profile generated by averaging the Fc datasets produced by
 * replicates sample profiles. This increases Fc read precision which in turn
 * generates a more reliable analysis.
 *
 * @author Bob Rutledge
 */
public class AverageSampleProfile extends SampleProfile implements AverageProfile {

    private List<SampleProfile> sampleProfileList;
    private double avTm = 0;//The average amplicon melting temperature of the SampleProfiles
    private boolean isTheAverageReplicateNoLessThan10Molecules;
    private double repAvNo = -1;//This should conform to both +/-fixing Emax and Fmax normalization
    private double replicateScatterTolerance = 0.5;//The maximum C1/2 range of the replicate profiles allowed for valid average profile construction

    /**
     * An average sample profile constructed from its sample replicate profiles.
     */
    public AverageSampleProfile() {
        setChildClass(SampleProfile.class);
    }

    /**
     *
     * @return list of replicate sample profiles
     */
    public List<SampleProfile> getReplicateProfileList() {
        return sampleProfileList;
    }

    /**
     * Will throw an illegal cast exception if the list does not contain Sample
     * Profiles.
     *
     * @param replicate Profile list containing SampleProfiles
     */
    @SuppressWarnings(value = "unchecked")
    public void setReplicateProfileList(List<? extends Profile> replicateProfileList) {
        this.sampleProfileList = (List<SampleProfile>) replicateProfileList;
        calculateAvAmpTm();
    }

    /**
     * Returns the average melting temperature (Tm) of the SampleProfile(s)
     * amplicons. Note that this will return -1 if a Tm is not available.
     *
     * @return the average SampleProfile Tm or -1 if none is available
     */
    public double calculateAvAmpTm() {
        double tmSum = 0;
        int counter = 0;
        for (SampleProfile repProfile : sampleProfileList) {
            if (repProfile.isExcluded()) {
                continue;//Do nothing
            } else {
                if (repProfile.hasAnLreWindowBeenFound()) {
                    tmSum += repProfile.getAmpTm();
                    counter++;
                }
            }
        }
        if (counter != 0) {
            avTm = tmSum / counter;
        } else {
            avTm = -1;
        }
        return avTm;
    }

    @Override
    public double getAmpTm() {
        return calculateAvAmpTm();
    }

    /**
     * Recalculates No depending on the state of this AverageProfile. If
     * ReplicateSampleProfile average No is less than 10 molecules, the
     * AverageProfile will be inactivated and No set to the ReplicateProfile
     * average No.
     */
    @Override
    public void updateSampleProfile() {
        //Without an OCF, No values cannot be calculated
        if (getOCF() >= 0) {
            isTheReplicateAverageNoLessThan10Molecules();
        } else {
            no = -1;//Signifies no values vs. just zero
        }
        if (!isTheAverageReplicateNoLessThan10Molecules) {
            super.updateSampleProfile();
        }
        //Updates the No values
    }

    /**
     * Sort By Amplicon Name, then Sample name
     *
     * @param o
     * @return
     */
    @Override
    public int compareTo(Object o) {
        SampleProfile profile = (AverageSampleProfile) o;
        //Sort by name
        if (getAmpliconName().compareTo(profile.getAmpliconName()) == 0) {
            //They have the same Sample name
            //Sort by Amplicon name
            return getSampleName().compareTo(profile.getSampleName());
        }
        //They have different Sample names, to use Sample name to sort
        return getAmpliconName().compareTo(profile.getAmpliconName());
    }

    /**
     * Determines if the AverageProfile is valid, based on whether the number of
     * target molecules in the sample is greater than 10. If the number of
     * target molecules is less than 10, the resulting average profile becomes
     * distorted due to by Poison Distribution, generating extensive profile
     * scattering.
     * <p>
     * In this case, the AverageProfile inherits the target quantities
     * determined by the replicate profiles, that is the average from the
     * replicate profiles. Calling this function will also update the profile.
     *
     * @return whether the average No is less than 10 molecules
     */
    public boolean isTheReplicateAverageNoLessThan10Molecules() {
        if (getReplicateProfileList() == null) {
            //Occurs during data import
            return false;
        }
        //Not sure how well this will work
        if (isExcluded()) {
            return true;
        }

//        if (getTheNumberOfActiveReplicateProfiles() == 1){
//        //not sure if this is needed...
//       //TODO review how avProfiles revert to a single replicate profile
//    }
        //Try to calculate the replicate average No
        double sum = 0;
        int counter = 0;
        for (SampleProfile repPrf : getReplicateProfileList()) {
            //It is important not to include excluded profiles
            if (!repPrf.isExcluded()) {
                if (!repPrf.hasAnLreWindowBeenFound()) {
//Without an LRE Window, a valid LRE-derived avNo is not available
//However, such profiles (i.e. flat profiles) default to zero molecules and thus must be counted
                    counter++;
                } else {
                    sum += repPrf.getNo();
                    counter++;
                }
            }
        }
        if (counter == 0) {
            //No replicate profiles are avaiable
            repAvNo = 0;
            isTheAverageReplicateNoLessThan10Molecules = true;
            return true;
        }
        repAvNo = sum / counter;
        if (repAvNo < 10) {
            isTheAverageReplicateNoLessThan10Molecules = true;
            return true;
        } else {
            isTheAverageReplicateNoLessThan10Molecules = false;
            return false;
        }
    }

    @Override
    public double getNo() {
        if (!isTheAverageReplicateNoLessThan10Molecules) {
            return super.getNo();
        }
        return repAvNo;
    }

    public int getTheNumberOfActiveReplicateProfiles() {
        int numberOfActiveReplicateProfiles = 0;
        for (Profile profile : sampleProfileList) {
            if (!profile.isExcluded() || profile.hasAnLreWindowBeenFound()) {
                numberOfActiveReplicateProfiles++;
            }
        }
        return numberOfActiveReplicateProfiles;
    }

    /**
     * Determines whether the replicate profiles are sufficiently clustered to
     * generate a valid Fc dataset that was used to create this average profile.
     *
     * @return whether this is a valid average profile
     */
    public boolean areTheRepProfilesSufficientlyClustered() {
        //No issue if there is only one replicate profile
        if (getTheNumberOfActiveReplicateProfiles() == 1) {
            return true;
        }
        //Determine if the replicate C1/2 values range is >0.3 cycles
        //Determine the 2 most different C1/2 values
        Profile highest = null;
        Profile lowest = null;
        for (Profile prf : getReplicateProfileList()) {
            if (prf.hasAnLreWindowBeenFound() && !prf.isExcluded()) {
                if (highest == null){
                    highest = prf;
                }
                if (prf.getMidC() >= highest.getMidC()) {
                    //prf is the highest, so check to see if it is higher than the lowest
                    if (lowest != null) {
                        if (lowest.getMidC() > highest.getMidC()) {
                            lowest = highest;
                        }
                    } else {
                        lowest = highest;
                    }
                    highest = prf;
                } else {
                    if (lowest != null) {
                        if (lowest.getMidC() > prf.getMidC()) {
                            lowest = prf;
                        }
                    } else {
                        lowest = prf;
                    }
                }
            }
        }
        if (replicateScatterTolerance == 0) {//Profile predates scatter tolerance
            replicateScatterTolerance = 0.5;
        }
        if (highest.getMidC() - lowest.getMidC() > replicateScatterTolerance) {
            return false;
        }
        return true;
    }

    /**
     * The maximum allowable range of C1/2 values across the replicate profiles
     * for generating a valid average profile.
     *
     * @return the maximum range of C1/2 values
     */
    public double getReplicateScatterTolerance() {
        return replicateScatterTolerance;
    }

    /**
     * Sets the maximum allowable range of C1/2 values across the replicate
     * profiles for generating a valid average profile.
     *
     * @param replicateScatterTolerance
     */
    public void setReplicateScatterTolerance(double replicateScatterTolerance) {
        this.replicateScatterTolerance = replicateScatterTolerance;
    }
}
