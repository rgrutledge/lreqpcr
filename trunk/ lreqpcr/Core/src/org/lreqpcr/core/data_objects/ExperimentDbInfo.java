/*
 * Copyright (C) 2013   Bob Rutledge
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>
 * and open the template in the editor.
 */
package org.lreqpcr.core.data_objects;

/**
 * Stores experiment database information
 *
 * @author Bob Rutledge
 */
public class ExperimentDbInfo extends DatabaseInfo {

    private double ocf = 0;

    /**
     * This OCF is by default used to determine target quantity over an 
     * entire database. As such, only Runs using an identical reaction setup 
     * should be imported into a Sample database. However, there is an option 
     * to set a Run-specific OCF, while somewhat dubious, does allow inclusion 
     * of Runs with aberrant fluorescence intensities or Runs generated by a 
     * different reaction setup. In practice, this is 
     * a rare situation, and thus brings into question whether this option 
     * should be available, particularly for novice users. 
     * 
     * @return OCF the optical calibration factor used to calculate the number
     * of target molecules
     */
    public double getOcf() {
        return ocf;
    }

    /**
     * This OCF value that is by default used to determine target quantity over an 
     * entire database.
     * 
     * @param ocf the optical calibration factor used to calculate the number of
     * target molecules
     */
    public void setOcf(double ocf) {
        this.ocf = ocf;
    }
}