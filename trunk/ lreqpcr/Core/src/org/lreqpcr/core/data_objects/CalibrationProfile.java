/*
 * Copyright (C) 2010  Bob Rutledge
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>
 * and open the template in the editor.
 */
package org.lreqpcr.core.data_objects;

/**
 * A lambda gDNA derived profile generated by a single amplification reaction.
 * This is used to conduct optical calibration based on amplification of a known quantity of
 * lambda gDNA, from which an optical calibration factors (OCF) is generated.
 * Calculating OCF requires that the mass of lambda used in the amplification be provided.
 *
 * Note that because the central output of a CalbrationProfile is an OCF, dealing with
 * fixing Emax to 100% differs from that originally assumed during construction of Profile, in which No
 * is the primary output. This thus required CalibrationProfile to define an ocfEmax100.
 *
 * @author Bob Rutledge
 */
public class CalibrationProfile extends Profile {

    private double lambdaMass;//The mass of the lamdba gDNA in nanograms
    private double mo;//Mo calculated from the lambdaMass
    private double ocfEmax100;//OCF calculated using Emax fixed to 100%

    /**
     * Target strandedness is set to double stranded by default because it is 
     * assumed that lambda gDNA is the quantitative standard. 
     */
    public CalibrationProfile(Run run) {
        super(run);
        setTargetStrandedness(TargetStrandedness.DOUBLESTRANDED);
    }

    /**
     * Retrieves the quantity of the lambda standard that was amplified expressed
     * in nanograms
     * 
     * @return nanograms of lambda gDNA used to generate this profile
     */
    public double getLambdaMass() {
        return lambdaMass;
    }

    /**
     * Sets the quantity of the lambda standard that was amplified
     * 
     * @param lambdaMass picograms of lambda gDNA used to generate this calibration profile
     */
    public void setLambdaMass(double lambdaMass) {
        this.lambdaMass = lambdaMass / 1000000;//convert to nanograms
    }

    @Override
    /**
     * Calculates the optical calibration factor (OCF)
     * based on the amount of lambda gDNA (Mo) and the average Fo. 
     */
    public void updateProfile() {
        mo = (lambdaMass * getAmpliconSize()) / 48502;//Mo for lambda gDNA expressed in nanograms
        setOCF(getAvFo() / mo);
        ocfEmax100 = getAvFoEmax100() / mo;
        setNo(((getAvFo() / getOCF()) * 910000000000d) / getAmpliconSize());
        setNoEmax100(((getAvFoEmax100() / getOCF()) * 910000000000d) / getAmpliconSize());
    }

    @Override
    public double getOCF() {
        if (isEmaxFixedTo100()){
            return ocfEmax100;
        }else{
            return super.getOCF();
        }
    }

    /**
     * Sort to put excluded profiles at the bottom of the list
     * @param o the Profile to compare to
     * @return the comparator integer
     */
    @Override
    public int compareTo(Object o) {
        Profile profile = (Profile) o;
        if (!profile.isExcluded()) {
            if (isExcluded()) {
                return 1;
            } else {
                return -1;
            }
        }
        return 0;
    }
}
